/**
 * Generated by orval v6.5.3 🍺
 * Do not edit manually.
 * carshop
 * carshop restapi server
 * OpenAPI spec version: 1.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  UtilsResponse,
  FormsOrderSubmitInfo,
  GetApiV1OrderCountParams,
  GetApiV1OrderDeleteParams,
  GetApiV1OrderDetailParams,
  GetApiV1OrderListParams,
  FormsOrderUpdateInfo,
  FormsServiceJsonBody,
  FormsCategoryJsonBody,
  GetApiV1ServiceCategoryDeleteParams,
  GetApiV1ServiceCategoryListParams,
  FormsProdJsonBody,
  FormsProdCommentJsonBody,
  GetApiV1ServiceCategoryProductCommentDeleteParams,
  GetApiV1ServiceCategoryProductCommentDetailParams,
  GetApiV1ServiceCategoryProductCommentListParams,
  GetApiV1ServiceCategoryProductDeleteParams,
  GetApiV1ServiceCategoryProductDetailParams,
  FormsProdImageJsonBody,
  GetApiV1ServiceCategoryProductImageDeleteParams,
  GetApiV1ServiceCategoryProductImageDetailParams,
  GetApiV1ServiceCategoryProductImageListParams,
  GetApiV1ServiceCategoryProductListParams,
  FormsProdSkuJsonBody,
  GetApiV1ServiceCategoryProductSkuDeleteParams,
  GetApiV1ServiceCategoryProductSkuDetailParams,
  GetApiV1ServiceCategoryProductSkuListParams,
  FormsProdStoreJson,
  GetApiV1ServiceCategoryProductStoreDeleteParams,
  GetApiV1ServiceDeleteParams,
  FormsStoreInfoJsonBody,
  GetApiV1StoreDeleteParams,
  GetApiV1StoreDetailParams,
  GetApiV1StoreListParams,
  GetApiV1StoreProdListParams,
  FormsStoreUserJson,
  GetApiV1UserAuthCodeParams,
  FormsUserLogin,
  FormsUserCarBody,
  GetApiV1UserCarinfoDeleteParams,
  GetApiV1UserDeleteParams,
  GetApiV1UserDetailParams,
  GetApiV1UserListParams,
  FormsUserPasswd,
  FormsUserRegister,
  GetApiV1UserStoreListParams,
  FormsUserDetail,
  FormsAnnouncementJsonBody,
  FormsBannerJson,
  GetApiV1WebconfigBannerDeleteParams,
  FormsAuthLoginWx,
  FormsPrePayWx
} from './model'
import {
  rest
} from 'msw'
import faker from 'faker'


// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * 创建订单数据
ParamIn user_id: 订单所属用户的ID
ParamIn sku_id: 订单商品的的SKU ID
ParamIn store_id: 订单所属商户的ID
ParamIn pay_amount: 订单金额
ParamIn pay_method: 订单支付方式 - 默认微信支付
ParamOut order_trade_no: 返回支付订单流水
 * @summary 创建订单
 */
export const postApiV1OrderAdd = (
    formsOrderSubmitInfo: FormsOrderSubmitInfo, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/order/add`,
      formsOrderSubmitInfo,options
    );
  }



    export const usePostApiV1OrderAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1OrderAdd>, TError,{data: FormsOrderSubmitInfo}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1OrderAdd>, {data: FormsOrderSubmitInfo}> = (props) => {
          const {data} = props || {};

          return  postApiV1OrderAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1OrderAdd>, TError, {data: FormsOrderSubmitInfo}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 获取订单统计计数
ParamOut order_num: 所有订单计数
ParamOut order_unpaid: 未支付订单计数
ParamOut order_paid: 支付订单计数
ParamOut order_finished: 完成订单计数
ParamOut order_cancel: 取消订单计数
 * @summary 获取订单计数
 */
export const getApiV1OrderCount = (
    params?: GetApiV1OrderCountParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/order/count`,{
        params,
    ...options}
    );
  }


export const getGetApiV1OrderCountQueryKey = (params?: GetApiV1OrderCountParams,) => [`/api/v1/order/count`, ...(params ? [params]: [])];

    
export const useGetApiV1OrderCount = <TData = AsyncReturnType<typeof getApiV1OrderCount>, TError = AxiosError<unknown>>(
 params?: GetApiV1OrderCountParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1OrderCount>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1OrderCountQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1OrderCount>> = () => getApiV1OrderCount(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1OrderCount>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 删除订单id
 * @summary 删除订单
 */
export const getApiV1OrderDelete = (
    params?: GetApiV1OrderDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/order/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1OrderDeleteQueryKey = (params?: GetApiV1OrderDeleteParams,) => [`/api/v1/order/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1OrderDelete = <TData = AsyncReturnType<typeof getApiV1OrderDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1OrderDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1OrderDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1OrderDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1OrderDelete>> = () => getApiV1OrderDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1OrderDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取订单详细信息返回值
ParamOut order_id: 订单id
ParamOut user_id: 订单所属用户id
ParamOut store_id: 订单所属于商户id
ParamOut sku_id: 订单所属于商品sku id
ParamOut store_name: 订单所属于商户名称
ParamOut store_addr: 订单所属于商户地址
ParamOut store_phone: 订单所属于商户手机号
ParamOut store_image: 订单所属于商户图片
ParamOut prodsku_name: 订单所属于商品sku
ParamOut prodsku_spec: 订单所属于商户规格
ParamOut number: 订单商品数量
ParamOut staus: 订单所属于商户id
ParamOut payment: 订单支付方式
ParamOut amount: 订单金额
ParamOut code: 订单验证码
ParamOut trade_no: 订单流水号
 * @summary 获取订单详细信息
 */
export const getApiV1OrderDetail = (
    params?: GetApiV1OrderDetailParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/order/detail`,{
        params,
    ...options}
    );
  }


export const getGetApiV1OrderDetailQueryKey = (params?: GetApiV1OrderDetailParams,) => [`/api/v1/order/detail`, ...(params ? [params]: [])];

    
export const useGetApiV1OrderDetail = <TData = AsyncReturnType<typeof getApiV1OrderDetail>, TError = AxiosError<unknown>>(
 params?: GetApiV1OrderDetailParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1OrderDetail>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1OrderDetailQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1OrderDetail>> = () => getApiV1OrderDetail(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1OrderDetail>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取订单列表返回值
ParamOut order_id: 订单id
ParamOut user_id: 订单所属用户id
ParamOut store_id: 订单所属于商户id
ParamOut sku_id: 订单所属于商品sku id
ParamOut number: 订单商品数量
ParamOut staus: 订单所属于商户id
ParamOut payment: 订单支付方式
ParamOut amount: 订单金额
ParamOut trade_no: 订单流水号
 * @summary 获取订单列表
 */
export const getApiV1OrderList = (
    params?: GetApiV1OrderListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/order/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1OrderListQueryKey = (params?: GetApiV1OrderListParams,) => [`/api/v1/order/list`, ...(params ? [params]: [])];

    
export const useGetApiV1OrderList = <TData = AsyncReturnType<typeof getApiV1OrderList>, TError = AxiosError<unknown>>(
 params?: GetApiV1OrderListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1OrderList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1OrderListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1OrderList>> = () => getApiV1OrderList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1OrderList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新订单状态
ParamIn order_id: 更新订单id
ParamIn order_status: 更新订单状态值: unpay, payed, finished, cancel
 * @summary 更新订单状态
 */
export const postApiV1OrderUpdate = (
    formsOrderUpdateInfo: FormsOrderUpdateInfo, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/order/update`,
      formsOrderUpdateInfo,options
    );
  }



    export const usePostApiV1OrderUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1OrderUpdate>, TError,{data: FormsOrderUpdateInfo}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1OrderUpdate>, {data: FormsOrderUpdateInfo}> = (props) => {
          const {data} = props || {};

          return  postApiV1OrderUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1OrderUpdate>, TError, {data: FormsOrderUpdateInfo}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 创建服务
ParamIn service_name: 服务名称
ParamIn service_imgurl: 服务图片
 * @summary 创建服务
 */
export const postApiV1ServiceAdd = (
    formsServiceJsonBody: FormsServiceJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/add`,
      formsServiceJsonBody,options
    );
  }



    export const usePostApiV1ServiceAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceAdd>, TError,{data: FormsServiceJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceAdd>, {data: FormsServiceJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceAdd>, TError, {data: FormsServiceJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 创建产品种类
ParamIn category_name: 产品种类名称
ParamIn service_id: 服务ID
 * @summary 创建产品种类
 */
export const postApiV1ServiceCategoryAdd = (
    formsCategoryJsonBody: FormsCategoryJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/add`,
      formsCategoryJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryAdd>, TError,{data: FormsCategoryJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryAdd>, {data: FormsCategoryJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryAdd>, TError, {data: FormsCategoryJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除产品种类信息
 * @summary 删除产品种类信息
 */
export const getApiV1ServiceCategoryDelete = (
    params?: GetApiV1ServiceCategoryDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryDeleteQueryKey = (params?: GetApiV1ServiceCategoryDeleteParams,) => [`/api/v1/service/category/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryDelete = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryDelete>> = () => getApiV1ServiceCategoryDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取种类列表
ParamOut category_id: 产品种类ID
ParamOut category_name: 产品种类名称
ParamOut service_id: 服务ID
 * @summary 获取种类列表
 */
export const getApiV1ServiceCategoryList = (
    params?: GetApiV1ServiceCategoryListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryListQueryKey = (params?: GetApiV1ServiceCategoryListParams,) => [`/api/v1/service/category/list`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryList = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryList>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryList>> = () => getApiV1ServiceCategoryList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 创建产品
ParamIn prod_name: 产品的名称
ParamIn prod_status: 产品的状态：上架，下架，all
ParamIn prod_priority: 产品的优先级
ParamIn prod_price: 产品价格
ParamIn prod_main_image: 产品图片
ParamIn prod_comment_enable: 产品是否显示评论
ParamIn prod_desc: 产品描述
ParamIn category_id: 产品的种类id
ParamIn brand_id: 产品的商标id
ParamIn prod_stores: 产品的商家列表
 * @summary 创建产品
 */
export const postApiV1ServiceCategoryProductAdd = (
    formsProdJsonBody: FormsProdJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/add`,
      formsProdJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryProductAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductAdd>, TError,{data: FormsProdJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductAdd>, {data: FormsProdJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductAdd>, TError, {data: FormsProdJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 添加产品评论
ParamIn comment_level: 产品评论分数等级
ParamIn comment_name: 产品评论名称
ParamIn comment_context: 产品评论内容
ParamIn comment_image: 产品评论图片
ParamIn prod_id: 产品ID
 * @summary 添加产品评论
 */
export const postApiV1ServiceCategoryProductCommentAdd = (
    formsProdCommentJsonBody: FormsProdCommentJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/comment/add`,
      formsProdCommentJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryProductCommentAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductCommentAdd>, TError,{data: FormsProdCommentJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductCommentAdd>, {data: FormsProdCommentJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductCommentAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductCommentAdd>, TError, {data: FormsProdCommentJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除产品某条具体评论
 * @summary 删除产品某条具体评论
 */
export const getApiV1ServiceCategoryProductCommentDelete = (
    params?: GetApiV1ServiceCategoryProductCommentDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/comment/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductCommentDeleteQueryKey = (params?: GetApiV1ServiceCategoryProductCommentDeleteParams,) => [`/api/v1/service/category/product/comment/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductCommentDelete = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductCommentDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductCommentDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentDelete>> = () => getApiV1ServiceCategoryProductCommentDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取产品评论信息
ParamOut comment_id: 产品评论的ID
ParamOut comment_level: 产品评论分数等级
ParamOut comment_name: 产品评论名称
ParamOut comment_context: 产品评论内容
ParamOut comment_image: 产品评论图片
ParamOut prod_id: 产品ID
 * @summary 获取产品评论信息
 */
export const getApiV1ServiceCategoryProductCommentDetail = (
    params?: GetApiV1ServiceCategoryProductCommentDetailParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/comment/detail`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductCommentDetailQueryKey = (params?: GetApiV1ServiceCategoryProductCommentDetailParams,) => [`/api/v1/service/category/product/comment/detail`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductCommentDetail = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentDetail>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductCommentDetailParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentDetail>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductCommentDetailQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentDetail>> = () => getApiV1ServiceCategoryProductCommentDetail(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentDetail>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取产品评论列表
ParamOut comment_id: 产品评论的ID
ParamOut comment_level: 产品评论分数等级
ParamOut comment_name: 产品评论名称
ParamOut comment_context: 产品评论内容
ParamOut comment_image: 产品评论图片
ParamOut prod_id: 产品ID
 * @summary 获取产品评论列表
 */
export const getApiV1ServiceCategoryProductCommentList = (
    params?: GetApiV1ServiceCategoryProductCommentListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/comment/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductCommentListQueryKey = (params?: GetApiV1ServiceCategoryProductCommentListParams,) => [`/api/v1/service/category/product/comment/list`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductCommentList = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentList>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductCommentListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductCommentListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentList>> = () => getApiV1ServiceCategoryProductCommentList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductCommentList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新产品评论
ParamIn comment_id: 产品评论的ID
ParamIn comment_level: 产品评论分数等级
ParamIn comment_name: 产品评论名称
ParamIn comment_context: 产品评论内容
ParamIn comment_image: 产品评论图片
ParamIn prod_id: 产品ID
 * @summary 更新产品评论
 */
export const postApiV1ServiceCategoryProductCommentUpdate = (
    formsProdCommentJsonBody: FormsProdCommentJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/comment/update`,
      formsProdCommentJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryProductCommentUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductCommentUpdate>, TError,{data: FormsProdCommentJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductCommentUpdate>, {data: FormsProdCommentJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductCommentUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductCommentUpdate>, TError, {data: FormsProdCommentJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除产品
 * @summary 删除产品
 */
export const getApiV1ServiceCategoryProductDelete = (
    params?: GetApiV1ServiceCategoryProductDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductDeleteQueryKey = (params?: GetApiV1ServiceCategoryProductDeleteParams,) => [`/api/v1/service/category/product/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductDelete = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductDelete>> = () => getApiV1ServiceCategoryProductDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取产品具体信息
ParamOut prod_id: 产品的ID
ParamOut prod_name: 产品的名称
ParamOut prod_status: 产品的状态：上架，下架，all
ParamOut prod_priority: 产品的优先级
ParamOut prod_price: 产品价格
ParamOut prod_main_image: 产品图片
ParamOut prod_comment_enable: 产品是否显示评论
ParamOut prod_desc: 产品描述
ParamOut category_id: 产品的种类id
ParamOut brand_id: 产品的商标id
ParamOut prod_stores: 产品的商家列表
 * @summary 获取产品具体信息
 */
export const getApiV1ServiceCategoryProductDetail = (
    params?: GetApiV1ServiceCategoryProductDetailParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/detail`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductDetailQueryKey = (params?: GetApiV1ServiceCategoryProductDetailParams,) => [`/api/v1/service/category/product/detail`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductDetail = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductDetail>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductDetailParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductDetail>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductDetailQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductDetail>> = () => getApiV1ServiceCategoryProductDetail(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductDetail>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 添加产品image信息
ParamIn image_url: 产品image的名称
ParamIn image_type: 产品image的类型
ParamIn prod_id: 产品ID
 * @summary 添加产品image信息
 */
export const postApiV1ServiceCategoryProductImageAdd = (
    formsProdImageJsonBody: FormsProdImageJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/image/add`,
      formsProdImageJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryProductImageAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductImageAdd>, TError,{data: FormsProdImageJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductImageAdd>, {data: FormsProdImageJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductImageAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductImageAdd>, TError, {data: FormsProdImageJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除产品图片
 * @summary 删除产品图片
 */
export const getApiV1ServiceCategoryProductImageDelete = (
    params?: GetApiV1ServiceCategoryProductImageDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/image/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductImageDeleteQueryKey = (params?: GetApiV1ServiceCategoryProductImageDeleteParams,) => [`/api/v1/service/category/product/image/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductImageDelete = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductImageDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductImageDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductImageDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageDelete>> = () => getApiV1ServiceCategoryProductImageDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取产品image具体信息
ParamOut image_id: 产品image的ID
ParamOut image_url: 产品image的名称
ParamOut image_type: 产品image的类型
ParamOut prod_id: 产品ID
 * @summary 获取产品image具体信息
 */
export const getApiV1ServiceCategoryProductImageDetail = (
    params?: GetApiV1ServiceCategoryProductImageDetailParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/image/detail`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductImageDetailQueryKey = (params?: GetApiV1ServiceCategoryProductImageDetailParams,) => [`/api/v1/service/category/product/image/detail`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductImageDetail = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductImageDetail>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductImageDetailParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageDetail>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductImageDetailQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageDetail>> = () => getApiV1ServiceCategoryProductImageDetail(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageDetail>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取产品image列表
ParamOut image_id: 产品image的ID
ParamOut image_url: 产品image的名称
ParamOut image_type: 产品image的类型
ParamOut prod_id: 产品ID
 * @summary 获取产品image列表
 */
export const getApiV1ServiceCategoryProductImageList = (
    params?: GetApiV1ServiceCategoryProductImageListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/image/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductImageListQueryKey = (params?: GetApiV1ServiceCategoryProductImageListParams,) => [`/api/v1/service/category/product/image/list`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductImageList = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductImageList>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductImageListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductImageListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageList>> = () => getApiV1ServiceCategoryProductImageList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductImageList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新产品image信息
ParamIn image_id: 产品image的ID
ParamIn image_url: 产品image的名称
ParamIn image_type: 产品image的类型
ParamIn prod_id: 产品ID
 * @summary 更新产品image信息
 */
export const postApiV1ServiceCategoryProductImageUpdate = (
    formsProdImageJsonBody: FormsProdImageJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/image/update`,
      formsProdImageJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryProductImageUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductImageUpdate>, TError,{data: FormsProdImageJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductImageUpdate>, {data: FormsProdImageJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductImageUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductImageUpdate>, TError, {data: FormsProdImageJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 获取产品列表
ParamOut prod_id: 产品的ID
ParamOut prod_name: 产品的名称
ParamOut prod_status: 产品的状态：上架，下架，all
ParamOut prod_priority: 产品的优先级
ParamOut prod_price: 产品价格
ParamOut prod_main_image: 产品图片
ParamOut prod_comment_enable: 产品是否显示评论
ParamOut prod_desc: 产品描述
ParamOut category_id: 产品的种类id
ParamOut brand_id: 产品的商标id
ParamOut prod_stores: 产品的商家列表
 * @summary 获取产品列表
 */
export const getApiV1ServiceCategoryProductList = (
    params?: GetApiV1ServiceCategoryProductListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductListQueryKey = (params?: GetApiV1ServiceCategoryProductListParams,) => [`/api/v1/service/category/product/list`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductList = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductList>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductList>> = () => getApiV1ServiceCategoryProductList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 添加产品SKU信息
ParamIn sku_name: 产品SKU的名称
ParamIn sku_nums: 产品SKU的数量
ParamIn sku_price: 产品SKU的价格
ParamIn sku_discount: 产品SKU的折扣价
ParamIn sku_cost: 产品SKU的成本价
ParamIn sku_spec: 产品sku特征
ParamIn prod_id: 产品ID
 * @summary 添加产品SKU信息
 */
export const postApiV1ServiceCategoryProductSkuAdd = (
    formsProdSkuJsonBody: FormsProdSkuJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/sku/add`,
      formsProdSkuJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryProductSkuAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductSkuAdd>, TError,{data: FormsProdSkuJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductSkuAdd>, {data: FormsProdSkuJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductSkuAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductSkuAdd>, TError, {data: FormsProdSkuJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除产品SKU
 * @summary 删除产品SKU
 */
export const getApiV1ServiceCategoryProductSkuDelete = (
    params?: GetApiV1ServiceCategoryProductSkuDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/sku/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductSkuDeleteQueryKey = (params?: GetApiV1ServiceCategoryProductSkuDeleteParams,) => [`/api/v1/service/category/product/sku/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductSkuDelete = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductSkuDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductSkuDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuDelete>> = () => getApiV1ServiceCategoryProductSkuDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取产品某个SKU详细信息
ParamOut sku_id: 产品SKU的ID
ParamOut sku_name: 产品SKU的名称
ParamOut sku_nums: 产品SKU的数量
ParamOut sku_price: 产品SKU的价格
ParamOut sku_discount: 产品SKU的折扣价
ParamOut sku_cost: 产品SKU的成本价
ParamOut sku_spec: 产品sku特征
ParamOut prod_id: 产品ID
 * @summary 获取产品某个SKU详细信息
 */
export const getApiV1ServiceCategoryProductSkuDetail = (
    params?: GetApiV1ServiceCategoryProductSkuDetailParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/sku/detail`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductSkuDetailQueryKey = (params?: GetApiV1ServiceCategoryProductSkuDetailParams,) => [`/api/v1/service/category/product/sku/detail`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductSkuDetail = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuDetail>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductSkuDetailParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuDetail>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductSkuDetailQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuDetail>> = () => getApiV1ServiceCategoryProductSkuDetail(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuDetail>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取产品SKU列表
ParamOut sku_id: 产品SKU的ID
ParamOut sku_name: 产品SKU的名称
ParamOut sku_nums: 产品SKU的数量
ParamOut sku_price: 产品SKU的价格
ParamOut sku_discount: 产品SKU的折扣价
ParamOut sku_cost: 产品SKU的成本价
ParamOut sku_spec: 产品sku特征
ParamOut prod_id: 产品ID
 * @summary 获取产品SKU列表
 */
export const getApiV1ServiceCategoryProductSkuList = (
    params?: GetApiV1ServiceCategoryProductSkuListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/sku/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductSkuListQueryKey = (params?: GetApiV1ServiceCategoryProductSkuListParams,) => [`/api/v1/service/category/product/sku/list`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductSkuList = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuList>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductSkuListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductSkuListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuList>> = () => getApiV1ServiceCategoryProductSkuList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductSkuList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新产品SKU信息
ParamIn sku_id: 产品SKU的ID
ParamIn sku_name: 产品SKU的名称
ParamIn sku_nums: 产品SKU的数量
ParamIn sku_price: 产品SKU的价格
ParamIn sku_discount: 产品SKU的折扣价
ParamIn sku_cost: 产品SKU的成本价
ParamIn sku_spec: 产品sku特征
ParamIn prod_id: 产品ID
 * @summary 更新产品SKU信息
 */
export const postApiV1ServiceCategoryProductSkuUpdate = (
    formsProdSkuJsonBody: FormsProdSkuJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/sku/update`,
      formsProdSkuJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryProductSkuUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductSkuUpdate>, TError,{data: FormsProdSkuJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductSkuUpdate>, {data: FormsProdSkuJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductSkuUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductSkuUpdate>, TError, {data: FormsProdSkuJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 添加商品的商户绑定信息
ParamIn prod_id: 产品id
ParamIn store_id: 商店id
 * @summary 添加商品的商户绑定信息
 */
export const postApiV1ServiceCategoryProductStoreAdd = (
    formsProdStoreJson: FormsProdStoreJson, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/store/add`,
      formsProdStoreJson,options
    );
  }



    export const usePostApiV1ServiceCategoryProductStoreAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductStoreAdd>, TError,{data: FormsProdStoreJson}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductStoreAdd>, {data: FormsProdStoreJson}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductStoreAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductStoreAdd>, TError, {data: FormsProdStoreJson}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除产品与商店的连接
 * @summary 删除产品与商店的连接
 */
export const getApiV1ServiceCategoryProductStoreDelete = (
    params?: GetApiV1ServiceCategoryProductStoreDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/category/product/store/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceCategoryProductStoreDeleteQueryKey = (params?: GetApiV1ServiceCategoryProductStoreDeleteParams,) => [`/api/v1/service/category/product/store/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceCategoryProductStoreDelete = <TData = AsyncReturnType<typeof getApiV1ServiceCategoryProductStoreDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceCategoryProductStoreDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceCategoryProductStoreDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceCategoryProductStoreDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceCategoryProductStoreDelete>> = () => getApiV1ServiceCategoryProductStoreDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceCategoryProductStoreDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新产品
ParamIn prod_id: 产品的ID
ParamIn prod_name: 产品的名称
ParamIn prod_status: 产品的状态：上架，下架，all
ParamIn prod_priority: 产品的优先级
ParamIn prod_price: 产品价格
ParamIn prod_main_image: 产品图片
ParamIn prod_comment_enable: 产品是否显示评论
ParamIn prod_desc: 产品描述
ParamIn category_id: 产品的种类id
ParamIn brand_id: 产品的商标id
ParamIn prod_stores: 产品的商家列表
 * @summary 更新产品
 */
export const postApiV1ServiceCategoryProductUpdate = (
    formsProdJsonBody: FormsProdJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/service/category/product/update`,
      formsProdJsonBody,options
    );
  }



    export const usePostApiV1ServiceCategoryProductUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1ServiceCategoryProductUpdate>, TError,{data: FormsProdJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1ServiceCategoryProductUpdate>, {data: FormsProdJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1ServiceCategoryProductUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1ServiceCategoryProductUpdate>, TError, {data: FormsProdJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除服务
 * @summary 删除服务
 */
export const getApiV1ServiceDelete = (
    params?: GetApiV1ServiceDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1ServiceDeleteQueryKey = (params?: GetApiV1ServiceDeleteParams,) => [`/api/v1/service/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1ServiceDelete = <TData = AsyncReturnType<typeof getApiV1ServiceDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1ServiceDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceDelete>> = () => getApiV1ServiceDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取服务列表
ParamOut service_id: 服务ID
ParamOut service_name: 服务名称
ParamOut service_imgurl: 服务图片
 * @summary 获取服务列表
 */
export const getApiV1ServiceList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/service/list`,options
    );
  }


export const getGetApiV1ServiceListQueryKey = () => [`/api/v1/service/list`];

    
export const useGetApiV1ServiceList = <TData = AsyncReturnType<typeof getApiV1ServiceList>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1ServiceList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ServiceListQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1ServiceList>> = () => getApiV1ServiceList(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1ServiceList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新产品种类
ParamIn category_id: 产品种类ID
ParamIn category_name: 产品种类名称
ParamIn service_id: 服务ID
 * @summary 更新产品种类
 */
export const postApiV1SeviceCategoryUpdate = (
    formsCategoryJsonBody: FormsCategoryJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/sevice/category/update`,
      formsCategoryJsonBody,options
    );
  }



    export const usePostApiV1SeviceCategoryUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1SeviceCategoryUpdate>, TError,{data: FormsCategoryJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1SeviceCategoryUpdate>, {data: FormsCategoryJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1SeviceCategoryUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1SeviceCategoryUpdate>, TError, {data: FormsCategoryJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 更新服务
ParamIn service_id: 服务ID
ParamIn service_name: 服务名称
ParamIn service_imgurl: 服务图片
 * @summary 更新服务
 */
export const postApiV1SeviceUpdate = (
    formsServiceJsonBody: FormsServiceJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/sevice/update`,
      formsServiceJsonBody,options
    );
  }



    export const usePostApiV1SeviceUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1SeviceUpdate>, TError,{data: FormsServiceJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1SeviceUpdate>, {data: FormsServiceJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1SeviceUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1SeviceUpdate>, TError, {data: FormsServiceJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 创建商店信息
ParamIn store_id: 商店的ID
ParamIn user_id: 商店所属的用户的ID
ParamIn store_name: 商店名称
ParamIn store_addr: 商店地址
ParamIn store_ownner: 商店所有者，修理厂，年检站等
ParamIn store_phone: 商店电话
ParamIn store_bankcardnum: 商店银行卡号码
ParamIn store_bankcardname: 商店银行卡用户名
ParamIn store_image: 商店图片
 * @summary 创建商店
 */
export const postApiV1StoreAdd = (
    formsStoreInfoJsonBody: FormsStoreInfoJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/store/add`,
      formsStoreInfoJsonBody,options
    );
  }



    export const usePostApiV1StoreAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1StoreAdd>, TError,{data: FormsStoreInfoJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1StoreAdd>, {data: FormsStoreInfoJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1StoreAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1StoreAdd>, TError, {data: FormsStoreInfoJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除商店信息
 * @summary 删除商店信息
 */
export const getApiV1StoreDelete = (
    params?: GetApiV1StoreDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/store/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1StoreDeleteQueryKey = (params?: GetApiV1StoreDeleteParams,) => [`/api/v1/store/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1StoreDelete = <TData = AsyncReturnType<typeof getApiV1StoreDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1StoreDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1StoreDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1StoreDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1StoreDelete>> = () => getApiV1StoreDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1StoreDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取商店详细信息
ParamOut store_id: 商店的ID
ParamOut user_id: 商店所属的用户的ID
ParamOut store_name: 商店名称
ParamOut store_addr: 商店地址
ParamOut store_ownner: 商店所有者：修理厂，年检站等
ParamOut store_phone: 商店电话
ParamOut store_bankcardnum: 商店银行卡号码
ParamOut store_bankcardname: 商店银行卡用户名
ParamOut store_image: 商店图片
 * @summary 获取商店详细信息
 */
export const getApiV1StoreDetail = (
    params?: GetApiV1StoreDetailParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/store/detail`,{
        params,
    ...options}
    );
  }


export const getGetApiV1StoreDetailQueryKey = (params?: GetApiV1StoreDetailParams,) => [`/api/v1/store/detail`, ...(params ? [params]: [])];

    
export const useGetApiV1StoreDetail = <TData = AsyncReturnType<typeof getApiV1StoreDetail>, TError = AxiosError<unknown>>(
 params?: GetApiV1StoreDetailParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1StoreDetail>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1StoreDetailQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1StoreDetail>> = () => getApiV1StoreDetail(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1StoreDetail>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取商店列表
ParamOut store_id: 商店的ID
ParamOut user_id: 商店所属的用户的ID
ParamOut store_name: 商店名称
ParamOut store_addr: 商店地址
ParamOut store_ownner: 商店所有者，修理厂，年检站等
ParamOut store_phone: 商店电话
ParamOut store_bankcardnum: 商店银行卡号码
ParamOut store_bankcardname: 商店银行卡用户名
ParamOut store_image: 商店图片
 * @summary 获取商店列表
 */
export const getApiV1StoreList = (
    params?: GetApiV1StoreListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/store/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1StoreListQueryKey = (params?: GetApiV1StoreListParams,) => [`/api/v1/store/list`, ...(params ? [params]: [])];

    
export const useGetApiV1StoreList = <TData = AsyncReturnType<typeof getApiV1StoreList>, TError = AxiosError<unknown>>(
 params?: GetApiV1StoreListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1StoreList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1StoreListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1StoreList>> = () => getApiV1StoreList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1StoreList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取商店的产品列表
ParamOut prod_id: 产品的ID
ParamOut prod_name: 产品的名称
ParamOut prod_status: 产品的状态：上架，下架，all
ParamOut prod_priority: 产品的优先级
ParamOut prod_price: 产品价格
ParamOut prod_main_image: 产品图片
ParamOut prod_comment_enable: 产品是否显示评论
ParamOut prod_desc: 产品描述
ParamOut category_id: 产品的种类id
ParamOut brand_id: 产品的商标id
ParamOut prod_stores: 产品的商家列表
 * @summary 获取商店的产品列表
 */
export const getApiV1StoreProdList = (
    params?: GetApiV1StoreProdListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/store/prod/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1StoreProdListQueryKey = (params?: GetApiV1StoreProdListParams,) => [`/api/v1/store/prod/list`, ...(params ? [params]: [])];

    
export const useGetApiV1StoreProdList = <TData = AsyncReturnType<typeof getApiV1StoreProdList>, TError = AxiosError<unknown>>(
 params?: GetApiV1StoreProdListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1StoreProdList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1StoreProdListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1StoreProdList>> = () => getApiV1StoreProdList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1StoreProdList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新商店信息
ParamIn store_id: 商店的ID
ParamIn user_id: 商店所属的用户的ID
ParamIn store_name: 商店名称
ParamIn store_addr: 商店地址
ParamIn store_ownner: 商店所有者，修理厂，年检站等
ParamIn store_phone: 商店电话
ParamIn store_bankcardnum: 商店银行卡号码
ParamIn store_bankcardname: 商店银行卡用户名
ParamIn store_image: 商店图片
 * @summary 更新商店信息
 */
export const postApiV1StoreUpdate = (
    formsStoreInfoJsonBody: FormsStoreInfoJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/store/update`,
      formsStoreInfoJsonBody,options
    );
  }



    export const usePostApiV1StoreUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1StoreUpdate>, TError,{data: FormsStoreInfoJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1StoreUpdate>, {data: FormsStoreInfoJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1StoreUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1StoreUpdate>, TError, {data: FormsStoreInfoJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 绑定商店信息
ParamIn store_id: 商店的ID
ParamIn username: 用户名
ParamIn password: 用户密码
 * @summary 绑定用户的商店
 */
export const postApiV1StoreUserAdd = (
    formsStoreUserJson: FormsStoreUserJson, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/store/user/add`,
      formsStoreUserJson,options
    );
  }



    export const usePostApiV1StoreUserAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1StoreUserAdd>, TError,{data: FormsStoreUserJson}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1StoreUserAdd>, {data: FormsStoreUserJson}> = (props) => {
          const {data} = props || {};

          return  postApiV1StoreUserAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1StoreUserAdd>, TError, {data: FormsStoreUserJson}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 获取登陆注册码
 * @summary 获取登陆注册码
 */
export const getApiV1UserAuthCode = (
    params?: GetApiV1UserAuthCodeParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/user/auth/code`,{
        params,
    ...options}
    );
  }


export const getGetApiV1UserAuthCodeQueryKey = (params?: GetApiV1UserAuthCodeParams,) => [`/api/v1/user/auth/code`, ...(params ? [params]: [])];

    
export const useGetApiV1UserAuthCode = <TData = AsyncReturnType<typeof getApiV1UserAuthCode>, TError = AxiosError<unknown>>(
 params?: GetApiV1UserAuthCodeParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1UserAuthCode>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UserAuthCodeQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1UserAuthCode>> = () => getApiV1UserAuthCode(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1UserAuthCode>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 验证登陆
ParamIn uuid: 验证码uuid
ParamIn username: 登陆名
ParamIn password: 登陆密码md5
ParamIn code: 验证码
 * @summary 验证登陆
 */
export const postApiV1UserAuthLogin = (
    formsUserLogin: FormsUserLogin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/user/auth/login`,
      formsUserLogin,options
    );
  }



    export const usePostApiV1UserAuthLogin = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1UserAuthLogin>, TError,{data: FormsUserLogin}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1UserAuthLogin>, {data: FormsUserLogin}> = (props) => {
          const {data} = props || {};

          return  postApiV1UserAuthLogin(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1UserAuthLogin>, TError, {data: FormsUserLogin}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 添加用户车辆信息
ParamIn uid: 车辆所属用户id
ParamIn car_name: 车辆名称
ParamIn car_number: 车牌号
ParamIn car_license: 车辆行驶证url(需上传照片)
ParamIn driver_license: 驾驶证url(需上传照片)
 * @summary 添加用户车辆信息
 */
export const postApiV1UserCarinfoAdd = (
    formsUserCarBody: FormsUserCarBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/user/carinfo/add`,
      formsUserCarBody,options
    );
  }



    export const usePostApiV1UserCarinfoAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1UserCarinfoAdd>, TError,{data: FormsUserCarBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1UserCarinfoAdd>, {data: FormsUserCarBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1UserCarinfoAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1UserCarinfoAdd>, TError, {data: FormsUserCarBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 根据用户id和车辆id删除车辆数据
 * @summary 删除车辆信息
 */
export const getApiV1UserCarinfoDelete = (
    params?: GetApiV1UserCarinfoDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/user/carinfo/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1UserCarinfoDeleteQueryKey = (params?: GetApiV1UserCarinfoDeleteParams,) => [`/api/v1/user/carinfo/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1UserCarinfoDelete = <TData = AsyncReturnType<typeof getApiV1UserCarinfoDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1UserCarinfoDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1UserCarinfoDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UserCarinfoDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1UserCarinfoDelete>> = () => getApiV1UserCarinfoDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1UserCarinfoDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新用户车辆信息
ParamIn uid: 车辆所属用户id
ParamIn cid: 车辆信息id
ParamIn car_name: 车辆名称
ParamIn car_number: 车牌号
ParamIn car_license: 车辆行驶证url(需上传照片)
ParamIn driver_license: 驾驶证url(需上传照片)
 * @summary 更新用户车辆信息
 */
export const postApiV1UserCarinfoUpdate = (
    formsUserCarBody: FormsUserCarBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/user/carinfo/update`,
      formsUserCarBody,options
    );
  }



    export const usePostApiV1UserCarinfoUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1UserCarinfoUpdate>, TError,{data: FormsUserCarBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1UserCarinfoUpdate>, {data: FormsUserCarBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1UserCarinfoUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1UserCarinfoUpdate>, TError, {data: FormsUserCarBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 根据用户id删除用户
 * @summary 删除用户
 */
export const getApiV1UserDelete = (
    params?: GetApiV1UserDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/user/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1UserDeleteQueryKey = (params?: GetApiV1UserDeleteParams,) => [`/api/v1/user/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1UserDelete = <TData = AsyncReturnType<typeof getApiV1UserDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1UserDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1UserDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UserDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1UserDelete>> = () => getApiV1UserDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1UserDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 根据用户id获取用户详细信息
 * @summary 获取用户详细信息
 */
export const getApiV1UserDetail = (
    params?: GetApiV1UserDetailParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/user/detail`,{
        params,
    ...options}
    );
  }


export const getGetApiV1UserDetailQueryKey = (params?: GetApiV1UserDetailParams,) => [`/api/v1/user/detail`, ...(params ? [params]: [])];

    
export const useGetApiV1UserDetail = <TData = AsyncReturnType<typeof getApiV1UserDetail>, TError = AxiosError<unknown>>(
 params?: GetApiV1UserDetailParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1UserDetail>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UserDetailQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1UserDetail>> = () => getApiV1UserDetail(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1UserDetail>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 根据类型获取用户信息列表
 * @summary 获取用户信息列表
 */
export const getApiV1UserList = (
    params?: GetApiV1UserListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/user/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1UserListQueryKey = (params?: GetApiV1UserListParams,) => [`/api/v1/user/list`, ...(params ? [params]: [])];

    
export const useGetApiV1UserList = <TData = AsyncReturnType<typeof getApiV1UserList>, TError = AxiosError<unknown>>(
 params?: GetApiV1UserListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1UserList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UserListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1UserList>> = () => getApiV1UserList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1UserList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新用户密码
ParamIn uid: 更新用户id
ParamIn username: 用户登陆名
ParamIn oldpwd: 旧密码
ParamIn newpwd: 新密码
 * @summary 更新用户密码
 */
export const postApiV1UserPassword = (
    formsUserPasswd: FormsUserPasswd, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/user/password`,
      formsUserPasswd,options
    );
  }



    export const usePostApiV1UserPassword = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1UserPassword>, TError,{data: FormsUserPasswd}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1UserPassword>, {data: FormsUserPasswd}> = (props) => {
          const {data} = props || {};

          return  postApiV1UserPassword(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1UserPassword>, TError, {data: FormsUserPasswd}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 注册平台用户
ParamIn username: 注册用户名
ParamIn password: 用户名密码 md5
ParamIn role: 用户身份标示 管理员: 666, 维护: 66, 商户: 6, 用户: 0
ParamIn nickname: 用户昵称
ParamIn phone: 手机号码
ParamIn email: 邮箱地址
ParamIn address: 用户所在地
ParamIn avatar: 用户头像
ParamIn age: 年龄
ParamIn gender: 性别 男性: 0 女性: 1
ParamIn city: 所在城市
ParamIn province: 所在省份
ParamIn country: 所在国家
 * @summary 注册用户
 */
export const postApiV1UserRegister = (
    formsUserRegister: FormsUserRegister, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/user/register`,
      formsUserRegister,options
    );
  }



    export const usePostApiV1UserRegister = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1UserRegister>, TError,{data: FormsUserRegister}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1UserRegister>, {data: FormsUserRegister}> = (props) => {
          const {data} = props || {};

          return  postApiV1UserRegister(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1UserRegister>, TError, {data: FormsUserRegister}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 获取用户的商店列表
ParamOut store_id: 商店的ID
ParamOut user_id: 商店所属的用户的ID
ParamOut store_name: 商店名称
ParamOut store_addr: 商店地址
ParamOut store_ownner: 商店所有者，修理厂，年检站等
ParamOut store_phone: 商店电话
ParamOut store_bankcardnum: 商店银行卡号码
ParamOut store_bankcardname: 商店银行卡用户名
ParamOut store_image: 商店图片
 * @summary 获取用户的商店列表
 */
export const getApiV1UserStoreList = (
    params?: GetApiV1UserStoreListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/user/store/list`,{
        params,
    ...options}
    );
  }


export const getGetApiV1UserStoreListQueryKey = (params?: GetApiV1UserStoreListParams,) => [`/api/v1/user/store/list`, ...(params ? [params]: [])];

    
export const useGetApiV1UserStoreList = <TData = AsyncReturnType<typeof getApiV1UserStoreList>, TError = AxiosError<unknown>>(
 params?: GetApiV1UserStoreListParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1UserStoreList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UserStoreListQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1UserStoreList>> = () => getApiV1UserStoreList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1UserStoreList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新用户信息
ParamIn uid: 更新用户id
ParamIn nickname: 用户昵称
ParamIn phone: 手机号码
ParamIn email: 邮箱地址
ParamIn address: 用户所在地
ParamIn avatar: 用户头像
ParamIn age: 年龄
ParamIn gender: 性别 男性: 0 女性: 1
ParamIn city: 所在城市
ParamIn province: 所在省份
ParamIn country: 所在国家
 * @summary 更新用户信息
 */
export const postApiV1UserUpate = (
    formsUserDetail: FormsUserDetail, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/user/upate`,
      formsUserDetail,options
    );
  }



    export const usePostApiV1UserUpate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1UserUpate>, TError,{data: FormsUserDetail}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1UserUpate>, {data: FormsUserDetail}> = (props) => {
          const {data} = props || {};

          return  postApiV1UserUpate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1UserUpate>, TError, {data: FormsUserDetail}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 添加公告
ParamIn title: 公告标题
ParamIn content: 公告内容
 * @summary 添加公告
 */
export const postApiV1WebconfigAnnouncementAdd = (
    formsAnnouncementJsonBody: FormsAnnouncementJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/webconfig/announcement/add`,
      formsAnnouncementJsonBody,options
    );
  }



    export const usePostApiV1WebconfigAnnouncementAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1WebconfigAnnouncementAdd>, TError,{data: FormsAnnouncementJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1WebconfigAnnouncementAdd>, {data: FormsAnnouncementJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1WebconfigAnnouncementAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1WebconfigAnnouncementAdd>, TError, {data: FormsAnnouncementJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除公告
 * @summary 删除公告
 */
export const getApiV1WebconfigAnnouncementDelete = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/webconfig/announcement/delete`,options
    );
  }


export const getGetApiV1WebconfigAnnouncementDeleteQueryKey = () => [`/api/v1/webconfig/announcement/delete`];

    
export const useGetApiV1WebconfigAnnouncementDelete = <TData = AsyncReturnType<typeof getApiV1WebconfigAnnouncementDelete>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1WebconfigAnnouncementDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1WebconfigAnnouncementDeleteQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1WebconfigAnnouncementDelete>> = () => getApiV1WebconfigAnnouncementDelete(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1WebconfigAnnouncementDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取公告信息
ParamOut announcement_id: 公告ID
ParamOut title: 公告标题
ParamOut content: 公告内容
 * @summary 获取公告信息
 */
export const getApiV1WebconfigAnnouncementDetail = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/webconfig/announcement/detail`,options
    );
  }


export const getGetApiV1WebconfigAnnouncementDetailQueryKey = () => [`/api/v1/webconfig/announcement/detail`];

    
export const useGetApiV1WebconfigAnnouncementDetail = <TData = AsyncReturnType<typeof getApiV1WebconfigAnnouncementDetail>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1WebconfigAnnouncementDetail>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1WebconfigAnnouncementDetailQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1WebconfigAnnouncementDetail>> = () => getApiV1WebconfigAnnouncementDetail(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1WebconfigAnnouncementDetail>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 更新公告
ParamIn title: 公告标题
ParamIn content: 公告内容
 * @summary 更新公告
 */
export const postApiV1WebconfigAnnouncementUpdate = (
    formsAnnouncementJsonBody: FormsAnnouncementJsonBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/webconfig/announcement/update`,
      formsAnnouncementJsonBody,options
    );
  }



    export const usePostApiV1WebconfigAnnouncementUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1WebconfigAnnouncementUpdate>, TError,{data: FormsAnnouncementJsonBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1WebconfigAnnouncementUpdate>, {data: FormsAnnouncementJsonBody}> = (props) => {
          const {data} = props || {};

          return  postApiV1WebconfigAnnouncementUpdate(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1WebconfigAnnouncementUpdate>, TError, {data: FormsAnnouncementJsonBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 添加banner
ParamIn banner_id: 轮播图片id
ParamIn banner_image: 轮播图片路径
 * @summary 添加banner
 */
export const postApiV1WebconfigBannerAdd = (
    formsBannerJson: FormsBannerJson, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/webconfig/banner/add`,
      formsBannerJson,options
    );
  }



    export const usePostApiV1WebconfigBannerAdd = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1WebconfigBannerAdd>, TError,{data: FormsBannerJson}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1WebconfigBannerAdd>, {data: FormsBannerJson}> = (props) => {
          const {data} = props || {};

          return  postApiV1WebconfigBannerAdd(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1WebconfigBannerAdd>, TError, {data: FormsBannerJson}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 删除banner
 * @summary 删除banner
 */
export const getApiV1WebconfigBannerDelete = (
    params?: GetApiV1WebconfigBannerDeleteParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/webconfig/banner/delete`,{
        params,
    ...options}
    );
  }


export const getGetApiV1WebconfigBannerDeleteQueryKey = (params?: GetApiV1WebconfigBannerDeleteParams,) => [`/api/v1/webconfig/banner/delete`, ...(params ? [params]: [])];

    
export const useGetApiV1WebconfigBannerDelete = <TData = AsyncReturnType<typeof getApiV1WebconfigBannerDelete>, TError = AxiosError<unknown>>(
 params?: GetApiV1WebconfigBannerDeleteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1WebconfigBannerDelete>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1WebconfigBannerDeleteQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1WebconfigBannerDelete>> = () => getApiV1WebconfigBannerDelete(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1WebconfigBannerDelete>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 获取banner列表
ParamOut banner_id: 轮播图片id
ParamOut banner_image: 轮播图片
 * @summary 获取banner列表
 */
export const getApiV1WebconfigBannerList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.get(
      `/api/v1/webconfig/banner/list`,options
    );
  }


export const getGetApiV1WebconfigBannerListQueryKey = () => [`/api/v1/webconfig/banner/list`];

    
export const useGetApiV1WebconfigBannerList = <TData = AsyncReturnType<typeof getApiV1WebconfigBannerList>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiV1WebconfigBannerList>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1WebconfigBannerListQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiV1WebconfigBannerList>> = () => getApiV1WebconfigBannerList(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiV1WebconfigBannerList>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * 微信登陆授权返回自定义登陆态
ParamIn code: 登录凭证
ParamIn user_info: 登陆信息
 * @summary 微信登陆授权
 */
export const postApiV1WeixinAuth = (
    formsAuthLoginWx: FormsAuthLoginWx, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/weixin/auth`,
      formsAuthLoginWx,options
    );
  }



    export const usePostApiV1WeixinAuth = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1WeixinAuth>, TError,{data: FormsAuthLoginWx}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1WeixinAuth>, {data: FormsAuthLoginWx}> = (props) => {
          const {data} = props || {};

          return  postApiV1WeixinAuth(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1WeixinAuth>, TError, {data: FormsAuthLoginWx}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * 微信预支付
ParamIn order_trade_no: 订单流水号
ParamIn user_id: 支付用户id
 * @summary 微信预支付
 */
export const postApiV1WeixinPrepay = (
    formsPrePayWx: FormsPrePayWx, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UtilsResponse>> => {
    return axios.post(
      `/api/v1/weixin/prepay`,
      formsPrePayWx,options
    );
  }



    export const usePostApiV1WeixinPrepay = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiV1WeixinPrepay>, TError,{data: FormsPrePayWx}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiV1WeixinPrepay>, {data: FormsPrePayWx}> = (props) => {
          const {data} = props || {};

          return  postApiV1WeixinPrepay(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiV1WeixinPrepay>, TError, {data: FormsPrePayWx}, TContext>(mutationFn, mutationOptions)
    }
    


export const getPostApiV1OrderAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1OrderCountMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1OrderDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1OrderDetailMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1OrderListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1OrderUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductCommentAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductCommentDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductCommentDetailMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductCommentListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductCommentUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductDetailMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductImageAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductImageDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductImageDetailMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductImageListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductImageUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductSkuAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductSkuDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductSkuDetailMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductSkuListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductSkuUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductStoreAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceCategoryProductStoreDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1ServiceCategoryProductUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1ServiceListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1SeviceCategoryUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1SeviceUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1StoreAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1StoreDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1StoreDetailMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1StoreListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1StoreProdListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1StoreUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1StoreUserAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1UserAuthCodeMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1UserAuthLoginMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1UserCarinfoAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1UserCarinfoDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1UserCarinfoUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1UserDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1UserDetailMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1UserListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1UserPasswordMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1UserRegisterMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1UserStoreListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1UserUpateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1WebconfigAnnouncementAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1WebconfigAnnouncementDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1WebconfigAnnouncementDetailMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1WebconfigAnnouncementUpdateMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1WebconfigBannerAddMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1WebconfigBannerDeleteMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getGetApiV1WebconfigBannerListMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1WeixinAuthMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getPostApiV1WeixinPrepayMock = () => ({code: faker.helpers.randomize([faker.datatype.number(), undefined]), data: faker.helpers.randomize([{}, undefined]), msg: faker.helpers.randomize([faker.random.word(), undefined])})

export const getCarshopMSW = () => [
rest.post('*/api/v1/order/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1OrderAddMock()),
        )
      }),rest.get('*/api/v1/order/count', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1OrderCountMock()),
        )
      }),rest.get('*/api/v1/order/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1OrderDeleteMock()),
        )
      }),rest.get('*/api/v1/order/detail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1OrderDetailMock()),
        )
      }),rest.get('*/api/v1/order/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1OrderListMock()),
        )
      }),rest.post('*/api/v1/order/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1OrderUpdateMock()),
        )
      }),rest.post('*/api/v1/service/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceAddMock()),
        )
      }),rest.post('*/api/v1/service/category/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryAddMock()),
        )
      }),rest.get('*/api/v1/service/category/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryDeleteMock()),
        )
      }),rest.get('*/api/v1/service/category/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryListMock()),
        )
      }),rest.post('*/api/v1/service/category/product/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductAddMock()),
        )
      }),rest.post('*/api/v1/service/category/product/comment/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductCommentAddMock()),
        )
      }),rest.get('*/api/v1/service/category/product/comment/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductCommentDeleteMock()),
        )
      }),rest.get('*/api/v1/service/category/product/comment/detail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductCommentDetailMock()),
        )
      }),rest.get('*/api/v1/service/category/product/comment/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductCommentListMock()),
        )
      }),rest.post('*/api/v1/service/category/product/comment/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductCommentUpdateMock()),
        )
      }),rest.get('*/api/v1/service/category/product/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductDeleteMock()),
        )
      }),rest.get('*/api/v1/service/category/product/detail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductDetailMock()),
        )
      }),rest.post('*/api/v1/service/category/product/image/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductImageAddMock()),
        )
      }),rest.get('*/api/v1/service/category/product/image/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductImageDeleteMock()),
        )
      }),rest.get('*/api/v1/service/category/product/image/detail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductImageDetailMock()),
        )
      }),rest.get('*/api/v1/service/category/product/image/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductImageListMock()),
        )
      }),rest.post('*/api/v1/service/category/product/image/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductImageUpdateMock()),
        )
      }),rest.get('*/api/v1/service/category/product/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductListMock()),
        )
      }),rest.post('*/api/v1/service/category/product/sku/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductSkuAddMock()),
        )
      }),rest.get('*/api/v1/service/category/product/sku/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductSkuDeleteMock()),
        )
      }),rest.get('*/api/v1/service/category/product/sku/detail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductSkuDetailMock()),
        )
      }),rest.get('*/api/v1/service/category/product/sku/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductSkuListMock()),
        )
      }),rest.post('*/api/v1/service/category/product/sku/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductSkuUpdateMock()),
        )
      }),rest.post('*/api/v1/service/category/product/store/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductStoreAddMock()),
        )
      }),rest.get('*/api/v1/service/category/product/store/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceCategoryProductStoreDeleteMock()),
        )
      }),rest.post('*/api/v1/service/category/product/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1ServiceCategoryProductUpdateMock()),
        )
      }),rest.get('*/api/v1/service/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceDeleteMock()),
        )
      }),rest.get('*/api/v1/service/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ServiceListMock()),
        )
      }),rest.post('*/api/v1/sevice/category/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1SeviceCategoryUpdateMock()),
        )
      }),rest.post('*/api/v1/sevice/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1SeviceUpdateMock()),
        )
      }),rest.post('*/api/v1/store/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1StoreAddMock()),
        )
      }),rest.get('*/api/v1/store/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1StoreDeleteMock()),
        )
      }),rest.get('*/api/v1/store/detail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1StoreDetailMock()),
        )
      }),rest.get('*/api/v1/store/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1StoreListMock()),
        )
      }),rest.get('*/api/v1/store/prod/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1StoreProdListMock()),
        )
      }),rest.post('*/api/v1/store/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1StoreUpdateMock()),
        )
      }),rest.post('*/api/v1/store/user/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1StoreUserAddMock()),
        )
      }),rest.get('*/api/v1/user/auth/code', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1UserAuthCodeMock()),
        )
      }),rest.post('*/api/v1/user/auth/login', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1UserAuthLoginMock()),
        )
      }),rest.post('*/api/v1/user/carinfo/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1UserCarinfoAddMock()),
        )
      }),rest.get('*/api/v1/user/carinfo/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1UserCarinfoDeleteMock()),
        )
      }),rest.post('*/api/v1/user/carinfo/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1UserCarinfoUpdateMock()),
        )
      }),rest.get('*/api/v1/user/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1UserDeleteMock()),
        )
      }),rest.get('*/api/v1/user/detail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1UserDetailMock()),
        )
      }),rest.get('*/api/v1/user/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1UserListMock()),
        )
      }),rest.post('*/api/v1/user/password', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1UserPasswordMock()),
        )
      }),rest.post('*/api/v1/user/register', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1UserRegisterMock()),
        )
      }),rest.get('*/api/v1/user/store/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1UserStoreListMock()),
        )
      }),rest.post('*/api/v1/user/upate', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1UserUpateMock()),
        )
      }),rest.post('*/api/v1/webconfig/announcement/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1WebconfigAnnouncementAddMock()),
        )
      }),rest.get('*/api/v1/webconfig/announcement/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1WebconfigAnnouncementDeleteMock()),
        )
      }),rest.get('*/api/v1/webconfig/announcement/detail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1WebconfigAnnouncementDetailMock()),
        )
      }),rest.post('*/api/v1/webconfig/announcement/update', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1WebconfigAnnouncementUpdateMock()),
        )
      }),rest.post('*/api/v1/webconfig/banner/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1WebconfigBannerAddMock()),
        )
      }),rest.get('*/api/v1/webconfig/banner/delete', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1WebconfigBannerDeleteMock()),
        )
      }),rest.get('*/api/v1/webconfig/banner/list', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1WebconfigBannerListMock()),
        )
      }),rest.post('*/api/v1/weixin/auth', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1WeixinAuthMock()),
        )
      }),rest.post('*/api/v1/weixin/prepay', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostApiV1WeixinPrepayMock()),
        )
      }),]
